Integrating APIs and visualizing data are fundamental tasks in data science and application development. In this guide, we'll demonstrate how to fetch weather data from the OpenWeatherMap API using Python and visualize it using the matplotlib library.​
GitHub+2GitHub+2GitHub+2

Prerequisites:

    Python installed on your system.​

    An API key from OpenWeatherMap. You can obtain one by registering on their website.​
    GitHub+4GitHub+4GitHub+4

    The following Python libraries:​

        requests for making HTTP requests.​

        matplotlib for data visualization.​
        GitHub+1GitHub+1

Installation of Required Libraries:

If you haven't installed the required libraries, you can do so using pip:​

pip install requests matplotlib

Step-by-Step Guide:

    Import Necessary Libraries:

    import requests
    import matplotlib.pyplot as plt

    Set Up API Parameters:

    Replace 'your_api_key' with your actual OpenWeatherMap API key.

    API_KEY = 'your_api_key'
    CITY = 'Bengaluru'
    URL = f'http://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={API_KEY}&units=metric'

    Fetch Weather Data:

    Use the requests library to send a GET request to the OpenWeatherMap API and retrieve the weather data.

    response = requests.get(URL)
    if response.status_code == 200:
        data = response.json()
        temperature = data['main']['temp']
        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        weather_description = data['weather'][0]['description']
    else:
        print('Failed to retrieve data:', response.status_code)

    Display Weather Information:

    Print the fetched weather details to the console.

    print(f'Weather Data for {CITY}')
    print(f'Temperature: {temperature}°C')
    print(f'Humidity: {humidity}%')
    print(f'Pressure: {pressure} hPa')
    print(f'Description: {weather_description}')

    Visualize Data:

    Create a bar chart to visualize the temperature, humidity, and pressure.

    labels = ['Temperature (°C)', 'Humidity (%)', 'Pressure (hPa)']
    values = [temperature, humidity, pressure]

    plt.bar(labels, values, color=['blue', 'green', 'red'])
    plt.xlabel('Weather Metrics')
    plt.ylabel('Values')
    plt.title(f'Current Weather Data for {CITY}')
    plt.show()

Explanation:

    API Request: The script constructs a URL with the city name and API key to request weather data in Celsius.​
    GitHub+1GitHub+1

    Data Extraction: It parses the JSON response to extract temperature, humidity, pressure, and weather description.​
    GitHub

    Visualization: A bar chart is generated using matplotlib to display the weather metrics.​
    GitHub+2GitHub+2GitHub+2

Note: Ensure you handle exceptions and errors gracefully, especially when dealing with external APIs. For instance, check if the API response is successful before attempting to parse the data.​

This approach provides a clear example of integrating an API to fetch real-time data and visualizing it using Python. For more advanced visualizations and interactive plots, consider exploring libraries like seaborn or plotly.​

For additional examples and variations on this topic, you can refer to the following GitHub repositories:​

    API-INTEGRATION-AND-DATA-VISUALIZATION by Prinshu0795

    API-INTEGRATION-AND-DATA-VISUALIZATION by GNAVEEN1143

    API-INTEGRATION-AND-DATA-VISUALIZATION by geethikagunapati26

These repositories offer diverse implementations and visualizations that can further enhance your understanding and provide inspiration for your projects.​


